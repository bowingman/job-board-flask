schema {
  query: Query
  mutation: Mutation
}

type User {
  id: ID!
  name: String!
  password: String
  role: String!
  title: String
  description: String
  rate: Int
  approved: Boolean

  jobs: [User]
  applications: [Application]
}

type Job {
  id: ID!
  title: String!
  user_id: ID!
  user: User
  description: String
  company_scale: String
  company_tips: String
  job_info: String
  rate: Int
  approved: Boolean
  status: String
  created_at: String

  applications: [Application]
}

type Application {
  id: ID!
  user_id: ID
  job_id: ID
  content: String
  rate: String
  answer: String
  answered: Boolean

  user: User
  job: Job
}

input LoginInput {
  name: String!
  password: String!
}

type LoginResult {
  success: Boolean!
  errors: [String]
  user: User
  token: String
}

input RegisterInput {
  name: String!
  password: String!
  role: String!
  title: String
  description: String
}

type RegisterResult {
  success: Boolean!
  errors: [String]
  user: User
}

input createUserInput {
  name: String!
  password: String!
  role: String!
  title: String
  description: String
}

type createUserResult {
  success: Boolean!
  errors: [String]
  user: User
}

type LoginByTokenResult {
  success: Boolean!
  user: User
  errors: [String]
}

type GetUsersResult {
  success: Boolean!
  users: [User]
}

type GetUserResult {
  success: Boolean!
  user: User
  errors: [String]
}

input createJobInput {
  title: String!
  description: String
  company_scale: String
  company_tips: String
  job_info: String
}

type createJobResult {
  success: Boolean!
  errors: [String]
  job: Job
}

input createApplicationInput {
  job_id: Int
  content: String
  rate: Int
}

type createApplicationResult {
  success: Boolean!
  errors: [String]
  application: Application
}

type Query {
  loginByToken(token: String): LoginByTokenResult
  getUsers: GetUsersResult
  getUser(user_id: Int): GetUserResult
}

type Mutation {
  login(input: LoginInput!): LoginResult
  register(input: RegisterInput!): RegisterResult
  createUser(input: createUserInput!): createUserResult
  createJob(input: createJobInput!): createJobResult
  createApplication(input: createApplicationInput!): createApplicationResult
}
